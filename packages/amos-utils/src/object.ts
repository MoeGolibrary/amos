/*
 * @since 2024-10-17 21:04:28
 * @author junbao <junbao@moego.pet>
 */

import { isObject } from './equals';
import { Mutable, type PartialOptional } from './types';

export const $amos = Symbol('$amos');

export interface AmosObject<T extends string> {
  /**
   * Mark object kind, e,g, action_factory, action, box
   */
  readonly [$amos]: T;
  /**
   * The unique id of on object, it always generated by amos, used for
   * distinct factories. For object created by factory, the id should
   * be the factory's id.
   */
  readonly id: string;
  /**
   * The key of an object, it must be unique or not set for each object type.
   * Especially for box, it must be set and unique. And if you use {@link useQuery}
   * with SSR, each used action_factory also need a unique key.
   *
   * If it is mot set, it will same to {@link id}.
   */
  readonly key: string;
}

let nextId = 0;
const prefix = Date.now() - 1730347147096 + '-';

export function createAmosObject<T extends AmosObject<string>>(
  kind: T[typeof $amos],
  props: Omit<PartialOptional<T, 'key' | 'id'>, typeof $amos>,
): T {
  const mv = props as Mutable<T>;
  mv[$amos] = kind;
  mv.id ??= prefix + ++nextId;
  mv.key ??= mv.id;
  return mv;
}

export function isAmosObject<S extends AmosObject<any>>(obj: any, key: S[typeof $amos]): obj is S {
  return isObject(obj) && obj[$amos] === key;
}
